import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.*;
import java.util.ArrayList;
import java.util.Random;

public class PlayerPanel extends JFrame implements ChangeListener {

	private static final int PANEL_WIDTH = 1000;
	private static final int PANEL_HEIGHT = 400;
	private double width;
	private double height;
	private ArrayList<Double> pitNum;
	private Ellipse2D.Double[] beads;
	private Ellipse2D.Double[] circles;
	private MancalaModel mancalaModel;

	/**
	 * creates the playerpanel and initializes variables
	 * 
	 * @author anhthy
	 */

	private Point mousePoint;

	/**
	 * create MouseListeners
	 * 
	 * @author anhth
	 *
	 */
	private class MouseListeners extends MouseAdapter {
		/**
		 * updates data when mouse pressed
		 * 
		 * @param e
		 *            is the event when Mouse is pressed
		 */
		public void mousePressed(MouseEvent e) {
			mousePoint = e.getPoint();
			Ellipse2D.Double contained = new Ellipse2D.Double();
			int changePos=0;
			for (int i = 0; i < circles.length; i++) {
				if (circles[i].contains(mousePoint)) {
					contained = circles[i];
					changePos = i;
				}
			}
			System.out.println(changePos + "Points: " + mousePoint.getX() +" "+ mousePoint.getY());

			
		}

		@Override
		/**
		 * allows mouse wheel to be moved
		 * 
		 * @param arg0
		 *            is where mouse wheel is moved
		 */
		public void mouseWheelMoved(MouseWheelEvent arg0) {
			if (mousePoint == null) {
				return;
			}
			Point lastMousePoint = mousePoint;
			mousePoint = arg0.getPoint();
			double dx = mousePoint.getX() - lastMousePoint.getX();
			double dy = mousePoint.getY() - lastMousePoint.getY();

		}

	}

	public PlayerPanel(MancalaModel m) {
		mancalaModel = m;
		pitNum = mancalaModel.getData();

		circles = new Ellipse2D.Double[14];
		beads = new Ellipse2D.Double[36];

		width = getWidth() / 8;
		height = getHeight() / 2;

		MouseListeners listeners = new MouseListeners();
		addMouseListener(listeners);
		addMouseMotionListener(listeners);

		Icon playerIcon = new Icon() {

			@Override
			public int getIconHeight() {
				// TODO Auto-generated method stub
				return PANEL_HEIGHT;
			}

			@Override
			public int getIconWidth() {
				// TODO Auto-generated method stub
				return PANEL_WIDTH;
			}

			/**
			 * paints the board with the pits and circles
			 * 
			 * @author anhthy
			 */
			public void paintIcon(Component c, Graphics g, int x, int y) {

				Graphics2D g2 = (Graphics2D) g;
				g2.setColor(Color.PINK);

				double width = 900 / 8;
				double height = 400 / 2;
				double w = width;
				double h = 25;

				double dx = width - 10;
				double dy = width + 10;

				Ellipse2D.Double circle = new Ellipse2D.Double(w, h, dx, dy);
				Ellipse2D.Double circle2 = new Ellipse2D.Double(w * 2, h, dx, dy);
				Ellipse2D.Double circle3 = new Ellipse2D.Double(w * 3, h, dx, dy);
				Ellipse2D.Double circle4 = new Ellipse2D.Double(w * 4, h, dx, dy);
				Ellipse2D.Double circle5 = new Ellipse2D.Double(w * 5, h, dx, dy);
				Ellipse2D.Double circle6 = new Ellipse2D.Double(w * 6, h, dx, dy);
				Ellipse2D.Double pitCircle = new Ellipse2D.Double(5, h, width - 10, height * 2 - 100);
				circles[12] = (circle);
				circles[11] = (circle2);
				circles[10] = (circle3);
				circles[9] = (circle4);
				circles[8] = (circle5);
				circles[7] = (circle6);
				circles[13] = (pitCircle);

				w = width;
				h = height + 15;

				Ellipse2D.Double bcircle = new Ellipse2D.Double(w, h, dx, dy);
				Ellipse2D.Double bcircle2 = new Ellipse2D.Double(w * 2, h, dx, dy);
				Ellipse2D.Double bcircle3 = new Ellipse2D.Double(w * 3, h, dx, dy);
				Ellipse2D.Double bcircle4 = new Ellipse2D.Double(w * 4, h, dx, dy);
				Ellipse2D.Double bcircle5 = new Ellipse2D.Double(w * 5, h, dx, dy);
				Ellipse2D.Double bcircle6 = new Ellipse2D.Double(w * 6, h, dx, dy);
				Ellipse2D.Double bpitCircle = new Ellipse2D.Double(5 + 7 * w, 25, width - 10, height * 2 - 100);
				circles[5] = (bcircle);
				circles[4] = (bcircle2);
				circles[3] = (bcircle3);
				circles[2] = (bcircle4);
				circles[1] = (bcircle5);
				circles[0] = (bcircle6);
				circles[6] = (bpitCircle);

				int beadCount = 0;
				Ellipse2D.Double bead;
				for (int i = 0; i < circles.length; i++) {
					Ellipse2D.Double drawn = circles[i];

					for (int j = 0; j < pitNum.get(i); j++) {
						bead = new Bead(drawn, j).create();
						beads[beadCount] = bead;
						beadCount++;

					}

					g2.fill(drawn);
					g2.draw(drawn);

				}

				for (int i = 0; i < beads.length; i++) {
					Ellipse2D.Double b = beads[i];
					g2.setPaint(Color.GREEN);
					g2.fill(b);
					g2.draw(b);
				}
			}

		};

		add(new JLabel(playerIcon));

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		pack();
		setVisible(true);
	}

	@Override
	public void stateChanged(ChangeEvent e) {
		pitNum = mancalaModel.getData();
		repaint();
	}
}
